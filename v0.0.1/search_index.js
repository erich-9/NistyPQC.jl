var documenterSearchIndex = {"docs":
[{"location":"bike/#BIKE","page":"BIKE","title":"BIKE","text":"","category":"section"},{"location":"bike/#Category-1","page":"BIKE","title":"Category 1","text":"","category":"section"},{"location":"bike/","page":"BIKE","title":"BIKE","text":"CurrentModule = NistyPQC.BIKE.Category1","category":"page"},{"location":"bike/","page":"BIKE","title":"BIKE","text":"generate_keys","category":"page"},{"location":"bike/#NistyPQC.BIKE.Category1.generate_keys","page":"BIKE","title":"NistyPQC.BIKE.Category1.generate_keys","text":"generate_keys([; seed])\n\nReturn a tuple (; ek, dk) consisting of an encapsulation key and the corresponding decapsulation key. The length of ek will be 1541 bytes and the length of dk 3114 bytes.\n\nFor a deterministic result, a seed of 32 bytes can be provided.\n\n\n\n\n\n","category":"function"},{"location":"bike/","page":"BIKE","title":"BIKE","text":"encapsulate_secret","category":"page"},{"location":"bike/#NistyPQC.BIKE.Category1.encapsulate_secret","page":"BIKE","title":"NistyPQC.BIKE.Category1.encapsulate_secret","text":"encapsulate_secret(ek[; m])\n\nReturn a tuple (; K, c) consisting of a shared secret K and a ciphertext c from which K can be recomputed with the decapsulation key dk that corresponds to ek. The parameter ek must be a valid encapsulation key of 1541 bytes. The length of K will be 32 bytes and the length of c 1573 bytes.\n\nFor a deterministic result, a plaintext m of 32 bytes can be provided.\n\n\n\n\n\n","category":"function"},{"location":"bike/","page":"BIKE","title":"BIKE","text":"decapsulate_secret","category":"page"},{"location":"bike/#NistyPQC.BIKE.Category1.decapsulate_secret","page":"BIKE","title":"NistyPQC.BIKE.Category1.decapsulate_secret","text":"decapsulate_secret(c, dk)\n\nReturn the secret key K in case of successful decapsulation. Otherwise implicitly reject, i.e. return a deterministic value K derived from c and dk. The parameter c must have 1573 bytes and dk 3114 bytes. Both for successful and failed decapsulation, K will have a length of 32 bytes.\n\n\n\n\n\n","category":"function"},{"location":"bike/#Category-3","page":"BIKE","title":"Category 3","text":"","category":"section"},{"location":"bike/","page":"BIKE","title":"BIKE","text":"CurrentModule = NistyPQC.BIKE.Category3","category":"page"},{"location":"bike/","page":"BIKE","title":"BIKE","text":"generate_keys","category":"page"},{"location":"bike/#NistyPQC.BIKE.Category3.generate_keys","page":"BIKE","title":"NistyPQC.BIKE.Category3.generate_keys","text":"generate_keys([; seed])\n\nReturn a tuple (; ek, dk) consisting of an encapsulation key and the corresponding decapsulation key. The length of ek will be 3083 bytes and the length of dk 6198 bytes.\n\nFor a deterministic result, a seed of 32 bytes can be provided.\n\n\n\n\n\n","category":"function"},{"location":"bike/","page":"BIKE","title":"BIKE","text":"encapsulate_secret","category":"page"},{"location":"bike/#NistyPQC.BIKE.Category3.encapsulate_secret","page":"BIKE","title":"NistyPQC.BIKE.Category3.encapsulate_secret","text":"encapsulate_secret(ek[; m])\n\nReturn a tuple (; K, c) consisting of a shared secret K and a ciphertext c from which K can be recomputed with the decapsulation key dk that corresponds to ek. The parameter ek must be a valid encapsulation key of 3083 bytes. The length of K will be 32 bytes and the length of c 3115 bytes.\n\nFor a deterministic result, a plaintext m of 32 bytes can be provided.\n\n\n\n\n\n","category":"function"},{"location":"bike/","page":"BIKE","title":"BIKE","text":"decapsulate_secret","category":"page"},{"location":"bike/#NistyPQC.BIKE.Category3.decapsulate_secret","page":"BIKE","title":"NistyPQC.BIKE.Category3.decapsulate_secret","text":"decapsulate_secret(c, dk)\n\nReturn the secret key K in case of successful decapsulation. Otherwise implicitly reject, i.e. return a deterministic value K derived from c and dk. The parameter c must have 3115 bytes and dk 6198 bytes. Both for successful and failed decapsulation, K will have a length of 32 bytes.\n\n\n\n\n\n","category":"function"},{"location":"bike/#Category-5","page":"BIKE","title":"Category 5","text":"","category":"section"},{"location":"bike/","page":"BIKE","title":"BIKE","text":"CurrentModule = NistyPQC.BIKE.Category5","category":"page"},{"location":"bike/","page":"BIKE","title":"BIKE","text":"generate_keys","category":"page"},{"location":"bike/#NistyPQC.BIKE.Category5.generate_keys","page":"BIKE","title":"NistyPQC.BIKE.Category5.generate_keys","text":"generate_keys([; seed])\n\nReturn a tuple (; ek, dk) consisting of an encapsulation key and the corresponding decapsulation key. The length of ek will be 5122 bytes and the length of dk 10276 bytes.\n\nFor a deterministic result, a seed of 32 bytes can be provided.\n\n\n\n\n\n","category":"function"},{"location":"bike/","page":"BIKE","title":"BIKE","text":"encapsulate_secret","category":"page"},{"location":"bike/#NistyPQC.BIKE.Category5.encapsulate_secret","page":"BIKE","title":"NistyPQC.BIKE.Category5.encapsulate_secret","text":"encapsulate_secret(ek[; m])\n\nReturn a tuple (; K, c) consisting of a shared secret K and a ciphertext c from which K can be recomputed with the decapsulation key dk that corresponds to ek. The parameter ek must be a valid encapsulation key of 5122 bytes. The length of K will be 32 bytes and the length of c 5154 bytes.\n\nFor a deterministic result, a plaintext m of 32 bytes can be provided.\n\n\n\n\n\n","category":"function"},{"location":"bike/","page":"BIKE","title":"BIKE","text":"decapsulate_secret","category":"page"},{"location":"bike/#NistyPQC.BIKE.Category5.decapsulate_secret","page":"BIKE","title":"NistyPQC.BIKE.Category5.decapsulate_secret","text":"decapsulate_secret(c, dk)\n\nReturn the secret key K in case of successful decapsulation. Otherwise implicitly reject, i.e. return a deterministic value K derived from c and dk. The parameter c must have 5154 bytes and dk 10276 bytes. Both for successful and failed decapsulation, K will have a length of 32 bytes.\n\n\n\n\n\n","category":"function"},{"location":"mldsa/#ML-DSA","page":"ML-DSA","title":"ML-DSA","text":"","category":"section"},{"location":"mldsa/#Category-2","page":"ML-DSA","title":"Category 2","text":"","category":"section"},{"location":"mldsa/","page":"ML-DSA","title":"ML-DSA","text":"CurrentModule = NistyPQC.MLDSA.Category2","category":"page"},{"location":"mldsa/","page":"ML-DSA","title":"ML-DSA","text":"generate_keys","category":"page"},{"location":"mldsa/#NistyPQC.MLDSA.Category2.generate_keys","page":"ML-DSA","title":"NistyPQC.MLDSA.Category2.generate_keys","text":"generate_keys([; 両])\n\nReturn a tuple (; sk, pk) consisting of a secret key and the corresponding public key. The length of sk will be 2560 bytes and the length of pk 1312 bytes.\n\nFor a deterministic result, a seed 両 of 32 bytes can be provided.\n\n\n\n\n\n","category":"function"},{"location":"mldsa/","page":"ML-DSA","title":"ML-DSA","text":"sign_message","category":"page"},{"location":"mldsa/#NistyPQC.MLDSA.Category2.sign_message","page":"ML-DSA","title":"NistyPQC.MLDSA.Category2.sign_message","text":"sign_message(msg, sk[; randomize])\n\nReturn a signature sig computed from the message msg based on the secret key sk. The message msg may consist of arbitrarily many bytes, whereas sk must be a valid secret key of 2560 bytes. The length of sig will be 2420 bytes.\n\nFor a deterministic result, the optional parameter randomize can be set to false or to some given 32 bytes.\n\n\n\n\n\n","category":"function"},{"location":"mldsa/","page":"ML-DSA","title":"ML-DSA","text":"verify_signature","category":"page"},{"location":"mldsa/#NistyPQC.MLDSA.Category2.verify_signature","page":"ML-DSA","title":"NistyPQC.MLDSA.Category2.verify_signature","text":"verify_signature(msg, sig, pk)\n\nCheck whether sig is a valid signature for msg under the public key pk. The message msg and potential signature sig may consist of arbitrarily many bytes, whereas pk must be a valid public key of 1312 bytes.\n\n\n\n\n\n","category":"function"},{"location":"mldsa/#Category-3","page":"ML-DSA","title":"Category 3","text":"","category":"section"},{"location":"mldsa/","page":"ML-DSA","title":"ML-DSA","text":"CurrentModule = NistyPQC.MLDSA.Category3","category":"page"},{"location":"mldsa/","page":"ML-DSA","title":"ML-DSA","text":"generate_keys","category":"page"},{"location":"mldsa/#NistyPQC.MLDSA.Category3.generate_keys","page":"ML-DSA","title":"NistyPQC.MLDSA.Category3.generate_keys","text":"generate_keys([; 両])\n\nReturn a tuple (; sk, pk) consisting of a secret key and the corresponding public key. The length of sk will be 4032 bytes and the length of pk 1952 bytes.\n\nFor a deterministic result, a seed 両 of 32 bytes can be provided.\n\n\n\n\n\n","category":"function"},{"location":"mldsa/","page":"ML-DSA","title":"ML-DSA","text":"sign_message","category":"page"},{"location":"mldsa/#NistyPQC.MLDSA.Category3.sign_message","page":"ML-DSA","title":"NistyPQC.MLDSA.Category3.sign_message","text":"sign_message(msg, sk[; randomize])\n\nReturn a signature sig computed from the message msg based on the secret key sk. The message msg may consist of arbitrarily many bytes, whereas sk must be a valid secret key of 4032 bytes. The length of sig will be 3309 bytes.\n\nFor a deterministic result, the optional parameter randomize can be set to false or to some given 32 bytes.\n\n\n\n\n\n","category":"function"},{"location":"mldsa/","page":"ML-DSA","title":"ML-DSA","text":"verify_signature","category":"page"},{"location":"mldsa/#NistyPQC.MLDSA.Category3.verify_signature","page":"ML-DSA","title":"NistyPQC.MLDSA.Category3.verify_signature","text":"verify_signature(msg, sig, pk)\n\nCheck whether sig is a valid signature for msg under the public key pk. The message msg and potential signature sig may consist of arbitrarily many bytes, whereas pk must be a valid public key of 1952 bytes.\n\n\n\n\n\n","category":"function"},{"location":"mldsa/#Category-5","page":"ML-DSA","title":"Category 5","text":"","category":"section"},{"location":"mldsa/","page":"ML-DSA","title":"ML-DSA","text":"CurrentModule = NistyPQC.MLDSA.Category5","category":"page"},{"location":"mldsa/","page":"ML-DSA","title":"ML-DSA","text":"generate_keys","category":"page"},{"location":"mldsa/#NistyPQC.MLDSA.Category5.generate_keys","page":"ML-DSA","title":"NistyPQC.MLDSA.Category5.generate_keys","text":"generate_keys([; 両])\n\nReturn a tuple (; sk, pk) consisting of a secret key and the corresponding public key. The length of sk will be 4896 bytes and the length of pk 2592 bytes.\n\nFor a deterministic result, a seed 両 of 32 bytes can be provided.\n\n\n\n\n\n","category":"function"},{"location":"mldsa/","page":"ML-DSA","title":"ML-DSA","text":"sign_message","category":"page"},{"location":"mldsa/#NistyPQC.MLDSA.Category5.sign_message","page":"ML-DSA","title":"NistyPQC.MLDSA.Category5.sign_message","text":"sign_message(msg, sk[; randomize])\n\nReturn a signature sig computed from the message msg based on the secret key sk. The message msg may consist of arbitrarily many bytes, whereas sk must be a valid secret key of 4896 bytes. The length of sig will be 4627 bytes.\n\nFor a deterministic result, the optional parameter randomize can be set to false or to some given 32 bytes.\n\n\n\n\n\n","category":"function"},{"location":"mldsa/","page":"ML-DSA","title":"ML-DSA","text":"verify_signature","category":"page"},{"location":"mldsa/#NistyPQC.MLDSA.Category5.verify_signature","page":"ML-DSA","title":"NistyPQC.MLDSA.Category5.verify_signature","text":"verify_signature(msg, sig, pk)\n\nCheck whether sig is a valid signature for msg under the public key pk. The message msg and potential signature sig may consist of arbitrarily many bytes, whereas pk must be a valid public key of 2592 bytes.\n\n\n\n\n\n","category":"function"},{"location":"usage/#Usage","page":"Usage","title":"Usage","text":"","category":"section"},{"location":"usage/","page":"Usage","title":"Usage","text":"First, load the package:","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"import NistyPQC","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"Then, pick a seeded pseudorandom number generator:","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"import Random\n\nNistyPQC.set_rng(Random.MersenneTwister(4711))","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"This last step is only necessary to guarantee reproducible outputs below.","category":"page"},{"location":"usage/#KEM","page":"Usage","title":"KEM","text":"","category":"section"},{"location":"usage/","page":"Usage","title":"Usage","text":"The key encapsulation mechanisms in this package all implement the following common interface:","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"(; ek, dk) = generate_keys()\n(; K, c) = encapsulate_secret(ek)\nK = decapsulate_secret(c, dk)","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"Here, all of ek, dk, K, and c are byte vectors.","category":"page"},{"location":"usage/#Example","page":"Usage","title":"Example","text":"","category":"section"},{"location":"usage/","page":"Usage","title":"Usage","text":"For instance, to work with ML-KEM in security category 5 define:","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"KEM = NistyPQC.MLKEM.Category5","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"Generate a key pair for encapsulation and decapsulation:","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"(; ek, dk) = KEM.generate_keys()","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"Use the encapsulation key ek to produce a shared secret K and a ciphertext c:","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"(; K, c) = KEM.encapsulate_secret(ek)","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"With the knowledge of the decapsulation key dk alone, it is then possible to compute K from c:","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"K = KEM.decapsulate_secret(c, dk)","category":"page"},{"location":"usage/#DSA","page":"Usage","title":"DSA","text":"","category":"section"},{"location":"usage/","page":"Usage","title":"Usage","text":"The digital signature algorithms in this package all implement the following common interface:","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"(; sk, pk) = generate_keys()\nsig = sign_message(msg, sk)\nverify_signature(msg, sig, pk)","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"Here, all of sk, pk, msg, and sig are byte vectors.","category":"page"},{"location":"usage/#Example-2","page":"Usage","title":"Example","text":"","category":"section"},{"location":"usage/","page":"Usage","title":"Usage","text":"For instance, to work with ML-DSA in security category 5 define:","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"DSA = NistyPQC.MLDSA.Category5","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"Generate a key pair for signature generation and verification:","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"(; sk, pk) = DSA.generate_keys()","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"Use the secret key sk to generate a signature for some message msg:","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"msg = b\"Sign me!\"\nsig = DSA.sign_message(msg, sk)","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"With the public key pk alone, it is then possible to check whether the signature for a message was indeed generated with the secret key sk:","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"DSA.verify_signature(msg, sig, pk)","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"DSA.verify_signature(b\"another message\", sig, pk)","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"DSA.verify_signature(msg, b\"invalid signature\", pk)","category":"page"},{"location":"mlkem/#ML-KEM","page":"ML-KEM","title":"ML-KEM","text":"","category":"section"},{"location":"mlkem/#Category-1","page":"ML-KEM","title":"Category 1","text":"","category":"section"},{"location":"mlkem/","page":"ML-KEM","title":"ML-KEM","text":"CurrentModule = NistyPQC.MLKEM.Category1","category":"page"},{"location":"mlkem/","page":"ML-KEM","title":"ML-KEM","text":"generate_keys","category":"page"},{"location":"mlkem/#NistyPQC.MLKEM.Category1.generate_keys","page":"ML-KEM","title":"NistyPQC.MLKEM.Category1.generate_keys","text":"generate_keys([; z, d])\n\nReturn a tuple (; ek, dk) consisting of an encapsulation key and the corresponding decapsulation key. The length of ek will be 800 bytes and the length of dk 1632 bytes.\n\nFor a deterministic result, a seed z of 32 bytes for implicit rejection and another seed d of 32 bytes for key generation can be provided.\n\n\n\n\n\n","category":"function"},{"location":"mlkem/","page":"ML-KEM","title":"ML-KEM","text":"encapsulate_secret","category":"page"},{"location":"mlkem/#NistyPQC.MLKEM.Category1.encapsulate_secret","page":"ML-KEM","title":"NistyPQC.MLKEM.Category1.encapsulate_secret","text":"encapsulate_secret(ek[; m])\n\nReturn a tuple (; K, c) consisting of a shared secret K and a ciphertext c from which K can be recomputed with the decapsulation key dk that corresponds to ek. The parameter ek must be a valid encapsulation key of 800 bytes. The length of K will be 32 bytes and the length of c 768 bytes.\n\nFor a deterministic result, a plaintext m of 32 bytes can be provided.\n\n\n\n\n\n","category":"function"},{"location":"mlkem/","page":"ML-KEM","title":"ML-KEM","text":"decapsulate_secret","category":"page"},{"location":"mlkem/#NistyPQC.MLKEM.Category1.decapsulate_secret","page":"ML-KEM","title":"NistyPQC.MLKEM.Category1.decapsulate_secret","text":"decapsulate_secret(c, dk)\n\nReturn the secret key K in case of successful decapsulation. Otherwise implicitly reject, i.e. return a deterministic value K derived from c and dk. The parameter c must have 768 bytes and dk 1632 bytes. Both for successful and failed decapsulation, K will have a length of 32 bytes.\n\n\n\n\n\n","category":"function"},{"location":"mlkem/#Category-3","page":"ML-KEM","title":"Category 3","text":"","category":"section"},{"location":"mlkem/","page":"ML-KEM","title":"ML-KEM","text":"CurrentModule = NistyPQC.MLKEM.Category3","category":"page"},{"location":"mlkem/","page":"ML-KEM","title":"ML-KEM","text":"generate_keys","category":"page"},{"location":"mlkem/#NistyPQC.MLKEM.Category3.generate_keys","page":"ML-KEM","title":"NistyPQC.MLKEM.Category3.generate_keys","text":"generate_keys([; z, d])\n\nReturn a tuple (; ek, dk) consisting of an encapsulation key and the corresponding decapsulation key. The length of ek will be 1184 bytes and the length of dk 2400 bytes.\n\nFor a deterministic result, a seed z of 32 bytes for implicit rejection and another seed d of 32 bytes for key generation can be provided.\n\n\n\n\n\n","category":"function"},{"location":"mlkem/","page":"ML-KEM","title":"ML-KEM","text":"encapsulate_secret","category":"page"},{"location":"mlkem/#NistyPQC.MLKEM.Category3.encapsulate_secret","page":"ML-KEM","title":"NistyPQC.MLKEM.Category3.encapsulate_secret","text":"encapsulate_secret(ek[; m])\n\nReturn a tuple (; K, c) consisting of a shared secret K and a ciphertext c from which K can be recomputed with the decapsulation key dk that corresponds to ek. The parameter ek must be a valid encapsulation key of 1184 bytes. The length of K will be 32 bytes and the length of c 1088 bytes.\n\nFor a deterministic result, a plaintext m of 32 bytes can be provided.\n\n\n\n\n\n","category":"function"},{"location":"mlkem/","page":"ML-KEM","title":"ML-KEM","text":"decapsulate_secret","category":"page"},{"location":"mlkem/#NistyPQC.MLKEM.Category3.decapsulate_secret","page":"ML-KEM","title":"NistyPQC.MLKEM.Category3.decapsulate_secret","text":"decapsulate_secret(c, dk)\n\nReturn the secret key K in case of successful decapsulation. Otherwise implicitly reject, i.e. return a deterministic value K derived from c and dk. The parameter c must have 1088 bytes and dk 2400 bytes. Both for successful and failed decapsulation, K will have a length of 32 bytes.\n\n\n\n\n\n","category":"function"},{"location":"mlkem/#Category-5","page":"ML-KEM","title":"Category 5","text":"","category":"section"},{"location":"mlkem/","page":"ML-KEM","title":"ML-KEM","text":"CurrentModule = NistyPQC.MLKEM.Category5","category":"page"},{"location":"mlkem/","page":"ML-KEM","title":"ML-KEM","text":"generate_keys","category":"page"},{"location":"mlkem/#NistyPQC.MLKEM.Category5.generate_keys","page":"ML-KEM","title":"NistyPQC.MLKEM.Category5.generate_keys","text":"generate_keys([; z, d])\n\nReturn a tuple (; ek, dk) consisting of an encapsulation key and the corresponding decapsulation key. The length of ek will be 1568 bytes and the length of dk 3168 bytes.\n\nFor a deterministic result, a seed z of 32 bytes for implicit rejection and another seed d of 32 bytes for key generation can be provided.\n\n\n\n\n\n","category":"function"},{"location":"mlkem/","page":"ML-KEM","title":"ML-KEM","text":"encapsulate_secret","category":"page"},{"location":"mlkem/#NistyPQC.MLKEM.Category5.encapsulate_secret","page":"ML-KEM","title":"NistyPQC.MLKEM.Category5.encapsulate_secret","text":"encapsulate_secret(ek[; m])\n\nReturn a tuple (; K, c) consisting of a shared secret K and a ciphertext c from which K can be recomputed with the decapsulation key dk that corresponds to ek. The parameter ek must be a valid encapsulation key of 1568 bytes. The length of K will be 32 bytes and the length of c 1568 bytes.\n\nFor a deterministic result, a plaintext m of 32 bytes can be provided.\n\n\n\n\n\n","category":"function"},{"location":"mlkem/","page":"ML-KEM","title":"ML-KEM","text":"decapsulate_secret","category":"page"},{"location":"mlkem/#NistyPQC.MLKEM.Category5.decapsulate_secret","page":"ML-KEM","title":"NistyPQC.MLKEM.Category5.decapsulate_secret","text":"decapsulate_secret(c, dk)\n\nReturn the secret key K in case of successful decapsulation. Otherwise implicitly reject, i.e. return a deterministic value K derived from c and dk. The parameter c must have 1568 bytes and dk 3168 bytes. Both for successful and failed decapsulation, K will have a length of 32 bytes.\n\n\n\n\n\n","category":"function"},{"location":"falcon/#Falcon","page":"Falcon","title":"Falcon","text":"","category":"section"},{"location":"falcon/#Category-1","page":"Falcon","title":"Category 1","text":"","category":"section"},{"location":"falcon/","page":"Falcon","title":"Falcon","text":"CurrentModule = NistyPQC.Falcon.Category1","category":"page"},{"location":"falcon/","page":"Falcon","title":"Falcon","text":"generate_keys","category":"page"},{"location":"falcon/#NistyPQC.Falcon.Category1.generate_keys","page":"Falcon","title":"NistyPQC.Falcon.Category1.generate_keys","text":"generate_keys()\n\nReturn a tuple (; sk, pk) consisting of a secret key and the corresponding public key. The length of sk will be 1281 bytes and the length of pk 897 bytes.\n\n\n\n\n\n","category":"function"},{"location":"falcon/","page":"Falcon","title":"Falcon","text":"sign_message","category":"page"},{"location":"falcon/#NistyPQC.Falcon.Category1.sign_message","page":"Falcon","title":"NistyPQC.Falcon.Category1.sign_message","text":"sign_message(msg, sk[; salt])\n\nReturn a signature sig computed from the message msg based on the secret key sk. The message msg may consist of arbitrarily many bytes, whereas sk must be a valid secret key of 1281 bytes. The length of sig will be 666 bytes.\n\nOptionally, a salt of 40 bytes used for hashing can be provided.\n\n\n\n\n\n","category":"function"},{"location":"falcon/","page":"Falcon","title":"Falcon","text":"verify_signature","category":"page"},{"location":"falcon/#NistyPQC.Falcon.Category1.verify_signature","page":"Falcon","title":"NistyPQC.Falcon.Category1.verify_signature","text":"verify_signature(msg, sig, pk)\n\nCheck whether sig is a valid signature for msg under the public key pk. The message msg and potential signature sig may consist of arbitrarily many bytes, whereas pk must be a valid public key of 897 bytes.\n\n\n\n\n\n","category":"function"},{"location":"falcon/#Category-5","page":"Falcon","title":"Category 5","text":"","category":"section"},{"location":"falcon/","page":"Falcon","title":"Falcon","text":"CurrentModule = NistyPQC.Falcon.Category5","category":"page"},{"location":"falcon/","page":"Falcon","title":"Falcon","text":"generate_keys","category":"page"},{"location":"falcon/#NistyPQC.Falcon.Category5.generate_keys","page":"Falcon","title":"NistyPQC.Falcon.Category5.generate_keys","text":"generate_keys()\n\nReturn a tuple (; sk, pk) consisting of a secret key and the corresponding public key. The length of sk will be 2305 bytes and the length of pk 1793 bytes.\n\n\n\n\n\n","category":"function"},{"location":"falcon/","page":"Falcon","title":"Falcon","text":"sign_message","category":"page"},{"location":"falcon/#NistyPQC.Falcon.Category5.sign_message","page":"Falcon","title":"NistyPQC.Falcon.Category5.sign_message","text":"sign_message(msg, sk[; salt])\n\nReturn a signature sig computed from the message msg based on the secret key sk. The message msg may consist of arbitrarily many bytes, whereas sk must be a valid secret key of 2305 bytes. The length of sig will be 1280 bytes.\n\nOptionally, a salt of 40 bytes used for hashing can be provided.\n\n\n\n\n\n","category":"function"},{"location":"falcon/","page":"Falcon","title":"Falcon","text":"verify_signature","category":"page"},{"location":"falcon/#NistyPQC.Falcon.Category5.verify_signature","page":"Falcon","title":"NistyPQC.Falcon.Category5.verify_signature","text":"verify_signature(msg, sig, pk)\n\nCheck whether sig is a valid signature for msg under the public key pk. The message msg and potential signature sig may consist of arbitrarily many bytes, whereas pk must be a valid public key of 1793 bytes.\n\n\n\n\n\n","category":"function"},{"location":"slhdsa_sha2/#SLH-DSA-with-SHA2","page":"SLH-DSA with SHA2","title":"SLH-DSA with SHA2","text":"","category":"section"},{"location":"slhdsa_sha2/#Category-1s","page":"SLH-DSA with SHA2","title":"Category 1s","text":"","category":"section"},{"location":"slhdsa_sha2/","page":"SLH-DSA with SHA2","title":"SLH-DSA with SHA2","text":"CurrentModule = NistyPQC.SLHDSA.Category1s_SHA2","category":"page"},{"location":"slhdsa_sha2/","page":"SLH-DSA with SHA2","title":"SLH-DSA with SHA2","text":"generate_keys","category":"page"},{"location":"slhdsa_sha2/#NistyPQC.SLHDSA.Category1s_SHA2.generate_keys","page":"SLH-DSA with SHA2","title":"NistyPQC.SLHDSA.Category1s_SHA2.generate_keys","text":"generate_keys([; seed])\n\nReturn a tuple (; sk, pk) consisting of a secret key and the corresponding public key. The length of sk will be 64 bytes and the length of pk 32 bytes.\n\nFor a deterministic result, a parameter seed = (; sk, prf, pk) consisting of three components of 16 bytes each can be provided.\n\n\n\n\n\n","category":"function"},{"location":"slhdsa_sha2/","page":"SLH-DSA with SHA2","title":"SLH-DSA with SHA2","text":"sign_message","category":"page"},{"location":"slhdsa_sha2/#NistyPQC.SLHDSA.Category1s_SHA2.sign_message","page":"SLH-DSA with SHA2","title":"NistyPQC.SLHDSA.Category1s_SHA2.sign_message","text":"sign_message(msg, sk[; randomize])\n\nReturn a signature sig computed from the message msg based on the secret key sk. The message msg may consist of arbitrarily many bytes, whereas sk must be a valid secret key of 64 bytes. The length of sig will be 7856 bytes.\n\nFor a deterministic result, the optional parameter randomize can be set to false or to some given 16 bytes.\n\n\n\n\n\n","category":"function"},{"location":"slhdsa_sha2/","page":"SLH-DSA with SHA2","title":"SLH-DSA with SHA2","text":"verify_signature","category":"page"},{"location":"slhdsa_sha2/#NistyPQC.SLHDSA.Category1s_SHA2.verify_signature","page":"SLH-DSA with SHA2","title":"NistyPQC.SLHDSA.Category1s_SHA2.verify_signature","text":"verify_signature(msg, sig, pk)\n\nCheck whether sig is a valid signature for msg under the public key pk. The message msg and potential signature sig may consist of arbitrarily many bytes, whereas pk must be a valid public key of 32 bytes.\n\n\n\n\n\n","category":"function"},{"location":"slhdsa_sha2/#Category-1f","page":"SLH-DSA with SHA2","title":"Category 1f","text":"","category":"section"},{"location":"slhdsa_sha2/","page":"SLH-DSA with SHA2","title":"SLH-DSA with SHA2","text":"CurrentModule = NistyPQC.SLHDSA.Category1f_SHA2","category":"page"},{"location":"slhdsa_sha2/","page":"SLH-DSA with SHA2","title":"SLH-DSA with SHA2","text":"generate_keys","category":"page"},{"location":"slhdsa_sha2/#NistyPQC.SLHDSA.Category1f_SHA2.generate_keys","page":"SLH-DSA with SHA2","title":"NistyPQC.SLHDSA.Category1f_SHA2.generate_keys","text":"generate_keys([; seed])\n\nReturn a tuple (; sk, pk) consisting of a secret key and the corresponding public key. The length of sk will be 64 bytes and the length of pk 32 bytes.\n\nFor a deterministic result, a parameter seed = (; sk, prf, pk) consisting of three components of 16 bytes each can be provided.\n\n\n\n\n\n","category":"function"},{"location":"slhdsa_sha2/","page":"SLH-DSA with SHA2","title":"SLH-DSA with SHA2","text":"sign_message","category":"page"},{"location":"slhdsa_sha2/#NistyPQC.SLHDSA.Category1f_SHA2.sign_message","page":"SLH-DSA with SHA2","title":"NistyPQC.SLHDSA.Category1f_SHA2.sign_message","text":"sign_message(msg, sk[; randomize])\n\nReturn a signature sig computed from the message msg based on the secret key sk. The message msg may consist of arbitrarily many bytes, whereas sk must be a valid secret key of 64 bytes. The length of sig will be 17088 bytes.\n\nFor a deterministic result, the optional parameter randomize can be set to false or to some given 16 bytes.\n\n\n\n\n\n","category":"function"},{"location":"slhdsa_sha2/","page":"SLH-DSA with SHA2","title":"SLH-DSA with SHA2","text":"verify_signature","category":"page"},{"location":"slhdsa_sha2/#NistyPQC.SLHDSA.Category1f_SHA2.verify_signature","page":"SLH-DSA with SHA2","title":"NistyPQC.SLHDSA.Category1f_SHA2.verify_signature","text":"verify_signature(msg, sig, pk)\n\nCheck whether sig is a valid signature for msg under the public key pk. The message msg and potential signature sig may consist of arbitrarily many bytes, whereas pk must be a valid public key of 32 bytes.\n\n\n\n\n\n","category":"function"},{"location":"slhdsa_sha2/#Category-3s","page":"SLH-DSA with SHA2","title":"Category 3s","text":"","category":"section"},{"location":"slhdsa_sha2/","page":"SLH-DSA with SHA2","title":"SLH-DSA with SHA2","text":"CurrentModule = NistyPQC.SLHDSA.Category3s_SHA2","category":"page"},{"location":"slhdsa_sha2/","page":"SLH-DSA with SHA2","title":"SLH-DSA with SHA2","text":"generate_keys","category":"page"},{"location":"slhdsa_sha2/#NistyPQC.SLHDSA.Category3s_SHA2.generate_keys","page":"SLH-DSA with SHA2","title":"NistyPQC.SLHDSA.Category3s_SHA2.generate_keys","text":"generate_keys([; seed])\n\nReturn a tuple (; sk, pk) consisting of a secret key and the corresponding public key. The length of sk will be 96 bytes and the length of pk 48 bytes.\n\nFor a deterministic result, a parameter seed = (; sk, prf, pk) consisting of three components of 24 bytes each can be provided.\n\n\n\n\n\n","category":"function"},{"location":"slhdsa_sha2/","page":"SLH-DSA with SHA2","title":"SLH-DSA with SHA2","text":"sign_message","category":"page"},{"location":"slhdsa_sha2/#NistyPQC.SLHDSA.Category3s_SHA2.sign_message","page":"SLH-DSA with SHA2","title":"NistyPQC.SLHDSA.Category3s_SHA2.sign_message","text":"sign_message(msg, sk[; randomize])\n\nReturn a signature sig computed from the message msg based on the secret key sk. The message msg may consist of arbitrarily many bytes, whereas sk must be a valid secret key of 96 bytes. The length of sig will be 16224 bytes.\n\nFor a deterministic result, the optional parameter randomize can be set to false or to some given 24 bytes.\n\n\n\n\n\n","category":"function"},{"location":"slhdsa_sha2/","page":"SLH-DSA with SHA2","title":"SLH-DSA with SHA2","text":"verify_signature","category":"page"},{"location":"slhdsa_sha2/#NistyPQC.SLHDSA.Category3s_SHA2.verify_signature","page":"SLH-DSA with SHA2","title":"NistyPQC.SLHDSA.Category3s_SHA2.verify_signature","text":"verify_signature(msg, sig, pk)\n\nCheck whether sig is a valid signature for msg under the public key pk. The message msg and potential signature sig may consist of arbitrarily many bytes, whereas pk must be a valid public key of 48 bytes.\n\n\n\n\n\n","category":"function"},{"location":"slhdsa_sha2/#Category-3f","page":"SLH-DSA with SHA2","title":"Category 3f","text":"","category":"section"},{"location":"slhdsa_sha2/","page":"SLH-DSA with SHA2","title":"SLH-DSA with SHA2","text":"CurrentModule = NistyPQC.SLHDSA.Category3f_SHA2","category":"page"},{"location":"slhdsa_sha2/","page":"SLH-DSA with SHA2","title":"SLH-DSA with SHA2","text":"generate_keys","category":"page"},{"location":"slhdsa_sha2/#NistyPQC.SLHDSA.Category3f_SHA2.generate_keys","page":"SLH-DSA with SHA2","title":"NistyPQC.SLHDSA.Category3f_SHA2.generate_keys","text":"generate_keys([; seed])\n\nReturn a tuple (; sk, pk) consisting of a secret key and the corresponding public key. The length of sk will be 96 bytes and the length of pk 48 bytes.\n\nFor a deterministic result, a parameter seed = (; sk, prf, pk) consisting of three components of 24 bytes each can be provided.\n\n\n\n\n\n","category":"function"},{"location":"slhdsa_sha2/","page":"SLH-DSA with SHA2","title":"SLH-DSA with SHA2","text":"sign_message","category":"page"},{"location":"slhdsa_sha2/#NistyPQC.SLHDSA.Category3f_SHA2.sign_message","page":"SLH-DSA with SHA2","title":"NistyPQC.SLHDSA.Category3f_SHA2.sign_message","text":"sign_message(msg, sk[; randomize])\n\nReturn a signature sig computed from the message msg based on the secret key sk. The message msg may consist of arbitrarily many bytes, whereas sk must be a valid secret key of 96 bytes. The length of sig will be 35664 bytes.\n\nFor a deterministic result, the optional parameter randomize can be set to false or to some given 24 bytes.\n\n\n\n\n\n","category":"function"},{"location":"slhdsa_sha2/","page":"SLH-DSA with SHA2","title":"SLH-DSA with SHA2","text":"verify_signature","category":"page"},{"location":"slhdsa_sha2/#NistyPQC.SLHDSA.Category3f_SHA2.verify_signature","page":"SLH-DSA with SHA2","title":"NistyPQC.SLHDSA.Category3f_SHA2.verify_signature","text":"verify_signature(msg, sig, pk)\n\nCheck whether sig is a valid signature for msg under the public key pk. The message msg and potential signature sig may consist of arbitrarily many bytes, whereas pk must be a valid public key of 48 bytes.\n\n\n\n\n\n","category":"function"},{"location":"slhdsa_sha2/#Category-5s","page":"SLH-DSA with SHA2","title":"Category 5s","text":"","category":"section"},{"location":"slhdsa_sha2/","page":"SLH-DSA with SHA2","title":"SLH-DSA with SHA2","text":"CurrentModule = NistyPQC.SLHDSA.Category5s_SHA2","category":"page"},{"location":"slhdsa_sha2/","page":"SLH-DSA with SHA2","title":"SLH-DSA with SHA2","text":"generate_keys","category":"page"},{"location":"slhdsa_sha2/#NistyPQC.SLHDSA.Category5s_SHA2.generate_keys","page":"SLH-DSA with SHA2","title":"NistyPQC.SLHDSA.Category5s_SHA2.generate_keys","text":"generate_keys([; seed])\n\nReturn a tuple (; sk, pk) consisting of a secret key and the corresponding public key. The length of sk will be 128 bytes and the length of pk 64 bytes.\n\nFor a deterministic result, a parameter seed = (; sk, prf, pk) consisting of three components of 32 bytes each can be provided.\n\n\n\n\n\n","category":"function"},{"location":"slhdsa_sha2/","page":"SLH-DSA with SHA2","title":"SLH-DSA with SHA2","text":"sign_message","category":"page"},{"location":"slhdsa_sha2/#NistyPQC.SLHDSA.Category5s_SHA2.sign_message","page":"SLH-DSA with SHA2","title":"NistyPQC.SLHDSA.Category5s_SHA2.sign_message","text":"sign_message(msg, sk[; randomize])\n\nReturn a signature sig computed from the message msg based on the secret key sk. The message msg may consist of arbitrarily many bytes, whereas sk must be a valid secret key of 128 bytes. The length of sig will be 29792 bytes.\n\nFor a deterministic result, the optional parameter randomize can be set to false or to some given 32 bytes.\n\n\n\n\n\n","category":"function"},{"location":"slhdsa_sha2/","page":"SLH-DSA with SHA2","title":"SLH-DSA with SHA2","text":"verify_signature","category":"page"},{"location":"slhdsa_sha2/#NistyPQC.SLHDSA.Category5s_SHA2.verify_signature","page":"SLH-DSA with SHA2","title":"NistyPQC.SLHDSA.Category5s_SHA2.verify_signature","text":"verify_signature(msg, sig, pk)\n\nCheck whether sig is a valid signature for msg under the public key pk. The message msg and potential signature sig may consist of arbitrarily many bytes, whereas pk must be a valid public key of 64 bytes.\n\n\n\n\n\n","category":"function"},{"location":"slhdsa_sha2/#Category-5f","page":"SLH-DSA with SHA2","title":"Category 5f","text":"","category":"section"},{"location":"slhdsa_sha2/","page":"SLH-DSA with SHA2","title":"SLH-DSA with SHA2","text":"CurrentModule = NistyPQC.SLHDSA.Category5f_SHA2","category":"page"},{"location":"slhdsa_sha2/","page":"SLH-DSA with SHA2","title":"SLH-DSA with SHA2","text":"generate_keys","category":"page"},{"location":"slhdsa_sha2/#NistyPQC.SLHDSA.Category5f_SHA2.generate_keys","page":"SLH-DSA with SHA2","title":"NistyPQC.SLHDSA.Category5f_SHA2.generate_keys","text":"generate_keys([; seed])\n\nReturn a tuple (; sk, pk) consisting of a secret key and the corresponding public key. The length of sk will be 128 bytes and the length of pk 64 bytes.\n\nFor a deterministic result, a parameter seed = (; sk, prf, pk) consisting of three components of 32 bytes each can be provided.\n\n\n\n\n\n","category":"function"},{"location":"slhdsa_sha2/","page":"SLH-DSA with SHA2","title":"SLH-DSA with SHA2","text":"sign_message","category":"page"},{"location":"slhdsa_sha2/#NistyPQC.SLHDSA.Category5f_SHA2.sign_message","page":"SLH-DSA with SHA2","title":"NistyPQC.SLHDSA.Category5f_SHA2.sign_message","text":"sign_message(msg, sk[; randomize])\n\nReturn a signature sig computed from the message msg based on the secret key sk. The message msg may consist of arbitrarily many bytes, whereas sk must be a valid secret key of 128 bytes. The length of sig will be 49856 bytes.\n\nFor a deterministic result, the optional parameter randomize can be set to false or to some given 32 bytes.\n\n\n\n\n\n","category":"function"},{"location":"slhdsa_sha2/","page":"SLH-DSA with SHA2","title":"SLH-DSA with SHA2","text":"verify_signature","category":"page"},{"location":"slhdsa_sha2/#NistyPQC.SLHDSA.Category5f_SHA2.verify_signature","page":"SLH-DSA with SHA2","title":"NistyPQC.SLHDSA.Category5f_SHA2.verify_signature","text":"verify_signature(msg, sig, pk)\n\nCheck whether sig is a valid signature for msg under the public key pk. The message msg and potential signature sig may consist of arbitrarily many bytes, whereas pk must be a valid public key of 64 bytes.\n\n\n\n\n\n","category":"function"},{"location":"installation/#Installation","page":"Installation","title":"Installation","text":"","category":"section"},{"location":"installation/","page":"Installation","title":"Installation","text":"Install with the Julia package manager Pkg, just like any other registered Julia package:","category":"page"},{"location":"installation/","page":"Installation","title":"Installation","text":"pkg> add NistyPQC  # Press ']' to enter the Pkg REPL mode.","category":"page"},{"location":"installation/","page":"Installation","title":"Installation","text":"or","category":"page"},{"location":"installation/","page":"Installation","title":"Installation","text":"julia> using Pkg; Pkg.add(\"NistyPQC\")","category":"page"},{"location":"#NistyPQC","page":"NistyPQC","title":"NistyPQC","text":"","category":"section"},{"location":"","page":"NistyPQC","title":"NistyPQC","text":"Nifty PQC promoted by NIST.","category":"page"},{"location":"","page":"NistyPQC","title":"NistyPQC","text":"These are implementations in Julia of various post-quantum cryptography (PQC) algorithms that were picked as (candidate) winners in the Post-Quantum Cryptography Standardization Project run by the National Institute of Standards and Technology (NIST). They fall in two categories:","category":"page"},{"location":"","page":"NistyPQC","title":"NistyPQC","text":"key encapsulation mechanisms (KEM)\ndigital signature schemes/algorithms (DSA)","category":"page"},{"location":"","page":"NistyPQC","title":"NistyPQC","text":"All implementations in this package strive for simplicity and close resemblance with the specifications. The focus is not on performance, let alone on security.","category":"page"},{"location":"#Algorithms","page":"NistyPQC","title":"Algorithms","text":"","category":"section"},{"location":"#Winners","page":"NistyPQC","title":"Winners","text":"","category":"section"},{"location":"","page":"NistyPQC","title":"NistyPQC","text":"At the moment, NIST has published draft Federal Information Processing Standards (FIPS) for three of the winners:","category":"page"},{"location":"","page":"NistyPQC","title":"NistyPQC","text":"ML-KEM\nderived from CRYSTALS-Kyber\nspecified in FIPS 203, Module-Lattice-Based Key-Encapsulation Mechanism Standard\nML-DSA\nderived from CRYSTALS-Dilithium\nspecified in FIPS 204, Module-Lattice-Based Digital Signature Standard\nSLH-DSA\nderived from SPHINCS+\nspecified in FIPS 205, Stateless Hash-Based Digital Signature Standard","category":"page"},{"location":"","page":"NistyPQC","title":"NistyPQC","text":"There is one more winner with no draft standard available yet:","category":"page"},{"location":"","page":"NistyPQC","title":"NistyPQC","text":"Falcon (Fast-Fourier Lattice-based Compact Signatures over NTRU)","category":"page"},{"location":"#Candidates","page":"NistyPQC","title":"Candidates","text":"","category":"section"},{"location":"","page":"NistyPQC","title":"NistyPQC","text":"The team of winners might be joined by some of the submissions to Round 4 of the standardization project. Up to now, three of the candidates remain unbroken. All of them are code-based KEM's. For the time being, I've included one of them in this package:","category":"page"},{"location":"","page":"NistyPQC","title":"NistyPQC","text":"BIKE (Bit Flipping Key Encapsulation)","category":"page"},{"location":"#Security-Categories","page":"NistyPQC","title":"Security Categories","text":"","category":"section"},{"location":"","page":"NistyPQC","title":"NistyPQC","text":"Each algorithm comes in multiple variants. They are categorized according to the believed security strength. Namely, NIST defined the following five security strength categories based on corresponding attacks on symmetric ciphers:","category":"page"},{"location":"","page":"NistyPQC","title":"NistyPQC","text":"category successful attack at least as hard as\n1 key search on a block cipher with a 128-bit key (e.g. AES128)\n2 collision search on a 256-bit hash function (e.g. SHA256/SHA3-256)\n3 key search on a block cipher with a 192-bit key (e.g. AES192)\n4 collision search on a 384-bit hash function (e.g. SHA384/SHA3-384)\n5 key search on a block cipher with a 256-bit key (e.g. AES256)","category":"page"},{"location":"slhdsa_shake/#SLH-DSA-with-SHAKE","page":"SLH-DSA with SHAKE","title":"SLH-DSA with SHAKE","text":"","category":"section"},{"location":"slhdsa_shake/#Category-1s","page":"SLH-DSA with SHAKE","title":"Category 1s","text":"","category":"section"},{"location":"slhdsa_shake/","page":"SLH-DSA with SHAKE","title":"SLH-DSA with SHAKE","text":"CurrentModule = NistyPQC.SLHDSA.Category1s_SHAKE","category":"page"},{"location":"slhdsa_shake/","page":"SLH-DSA with SHAKE","title":"SLH-DSA with SHAKE","text":"generate_keys","category":"page"},{"location":"slhdsa_shake/#NistyPQC.SLHDSA.Category1s_SHAKE.generate_keys","page":"SLH-DSA with SHAKE","title":"NistyPQC.SLHDSA.Category1s_SHAKE.generate_keys","text":"generate_keys([; seed])\n\nReturn a tuple (; sk, pk) consisting of a secret key and the corresponding public key. The length of sk will be 64 bytes and the length of pk 32 bytes.\n\nFor a deterministic result, a parameter seed = (; sk, prf, pk) consisting of three components of 16 bytes each can be provided.\n\n\n\n\n\n","category":"function"},{"location":"slhdsa_shake/","page":"SLH-DSA with SHAKE","title":"SLH-DSA with SHAKE","text":"sign_message","category":"page"},{"location":"slhdsa_shake/#NistyPQC.SLHDSA.Category1s_SHAKE.sign_message","page":"SLH-DSA with SHAKE","title":"NistyPQC.SLHDSA.Category1s_SHAKE.sign_message","text":"sign_message(msg, sk[; randomize])\n\nReturn a signature sig computed from the message msg based on the secret key sk. The message msg may consist of arbitrarily many bytes, whereas sk must be a valid secret key of 64 bytes. The length of sig will be 7856 bytes.\n\nFor a deterministic result, the optional parameter randomize can be set to false or to some given 16 bytes.\n\n\n\n\n\n","category":"function"},{"location":"slhdsa_shake/","page":"SLH-DSA with SHAKE","title":"SLH-DSA with SHAKE","text":"verify_signature","category":"page"},{"location":"slhdsa_shake/#NistyPQC.SLHDSA.Category1s_SHAKE.verify_signature","page":"SLH-DSA with SHAKE","title":"NistyPQC.SLHDSA.Category1s_SHAKE.verify_signature","text":"verify_signature(msg, sig, pk)\n\nCheck whether sig is a valid signature for msg under the public key pk. The message msg and potential signature sig may consist of arbitrarily many bytes, whereas pk must be a valid public key of 32 bytes.\n\n\n\n\n\n","category":"function"},{"location":"slhdsa_shake/#Category-1f","page":"SLH-DSA with SHAKE","title":"Category 1f","text":"","category":"section"},{"location":"slhdsa_shake/","page":"SLH-DSA with SHAKE","title":"SLH-DSA with SHAKE","text":"CurrentModule = NistyPQC.SLHDSA.Category1f_SHAKE","category":"page"},{"location":"slhdsa_shake/","page":"SLH-DSA with SHAKE","title":"SLH-DSA with SHAKE","text":"generate_keys","category":"page"},{"location":"slhdsa_shake/#NistyPQC.SLHDSA.Category1f_SHAKE.generate_keys","page":"SLH-DSA with SHAKE","title":"NistyPQC.SLHDSA.Category1f_SHAKE.generate_keys","text":"generate_keys([; seed])\n\nReturn a tuple (; sk, pk) consisting of a secret key and the corresponding public key. The length of sk will be 64 bytes and the length of pk 32 bytes.\n\nFor a deterministic result, a parameter seed = (; sk, prf, pk) consisting of three components of 16 bytes each can be provided.\n\n\n\n\n\n","category":"function"},{"location":"slhdsa_shake/","page":"SLH-DSA with SHAKE","title":"SLH-DSA with SHAKE","text":"sign_message","category":"page"},{"location":"slhdsa_shake/#NistyPQC.SLHDSA.Category1f_SHAKE.sign_message","page":"SLH-DSA with SHAKE","title":"NistyPQC.SLHDSA.Category1f_SHAKE.sign_message","text":"sign_message(msg, sk[; randomize])\n\nReturn a signature sig computed from the message msg based on the secret key sk. The message msg may consist of arbitrarily many bytes, whereas sk must be a valid secret key of 64 bytes. The length of sig will be 17088 bytes.\n\nFor a deterministic result, the optional parameter randomize can be set to false or to some given 16 bytes.\n\n\n\n\n\n","category":"function"},{"location":"slhdsa_shake/","page":"SLH-DSA with SHAKE","title":"SLH-DSA with SHAKE","text":"verify_signature","category":"page"},{"location":"slhdsa_shake/#NistyPQC.SLHDSA.Category1f_SHAKE.verify_signature","page":"SLH-DSA with SHAKE","title":"NistyPQC.SLHDSA.Category1f_SHAKE.verify_signature","text":"verify_signature(msg, sig, pk)\n\nCheck whether sig is a valid signature for msg under the public key pk. The message msg and potential signature sig may consist of arbitrarily many bytes, whereas pk must be a valid public key of 32 bytes.\n\n\n\n\n\n","category":"function"},{"location":"slhdsa_shake/#Category-3s","page":"SLH-DSA with SHAKE","title":"Category 3s","text":"","category":"section"},{"location":"slhdsa_shake/","page":"SLH-DSA with SHAKE","title":"SLH-DSA with SHAKE","text":"CurrentModule = NistyPQC.SLHDSA.Category3s_SHAKE","category":"page"},{"location":"slhdsa_shake/","page":"SLH-DSA with SHAKE","title":"SLH-DSA with SHAKE","text":"generate_keys","category":"page"},{"location":"slhdsa_shake/#NistyPQC.SLHDSA.Category3s_SHAKE.generate_keys","page":"SLH-DSA with SHAKE","title":"NistyPQC.SLHDSA.Category3s_SHAKE.generate_keys","text":"generate_keys([; seed])\n\nReturn a tuple (; sk, pk) consisting of a secret key and the corresponding public key. The length of sk will be 96 bytes and the length of pk 48 bytes.\n\nFor a deterministic result, a parameter seed = (; sk, prf, pk) consisting of three components of 24 bytes each can be provided.\n\n\n\n\n\n","category":"function"},{"location":"slhdsa_shake/","page":"SLH-DSA with SHAKE","title":"SLH-DSA with SHAKE","text":"sign_message","category":"page"},{"location":"slhdsa_shake/#NistyPQC.SLHDSA.Category3s_SHAKE.sign_message","page":"SLH-DSA with SHAKE","title":"NistyPQC.SLHDSA.Category3s_SHAKE.sign_message","text":"sign_message(msg, sk[; randomize])\n\nReturn a signature sig computed from the message msg based on the secret key sk. The message msg may consist of arbitrarily many bytes, whereas sk must be a valid secret key of 96 bytes. The length of sig will be 16224 bytes.\n\nFor a deterministic result, the optional parameter randomize can be set to false or to some given 24 bytes.\n\n\n\n\n\n","category":"function"},{"location":"slhdsa_shake/","page":"SLH-DSA with SHAKE","title":"SLH-DSA with SHAKE","text":"verify_signature","category":"page"},{"location":"slhdsa_shake/#NistyPQC.SLHDSA.Category3s_SHAKE.verify_signature","page":"SLH-DSA with SHAKE","title":"NistyPQC.SLHDSA.Category3s_SHAKE.verify_signature","text":"verify_signature(msg, sig, pk)\n\nCheck whether sig is a valid signature for msg under the public key pk. The message msg and potential signature sig may consist of arbitrarily many bytes, whereas pk must be a valid public key of 48 bytes.\n\n\n\n\n\n","category":"function"},{"location":"slhdsa_shake/#Category-3f","page":"SLH-DSA with SHAKE","title":"Category 3f","text":"","category":"section"},{"location":"slhdsa_shake/","page":"SLH-DSA with SHAKE","title":"SLH-DSA with SHAKE","text":"CurrentModule = NistyPQC.SLHDSA.Category3f_SHAKE","category":"page"},{"location":"slhdsa_shake/","page":"SLH-DSA with SHAKE","title":"SLH-DSA with SHAKE","text":"generate_keys","category":"page"},{"location":"slhdsa_shake/#NistyPQC.SLHDSA.Category3f_SHAKE.generate_keys","page":"SLH-DSA with SHAKE","title":"NistyPQC.SLHDSA.Category3f_SHAKE.generate_keys","text":"generate_keys([; seed])\n\nReturn a tuple (; sk, pk) consisting of a secret key and the corresponding public key. The length of sk will be 96 bytes and the length of pk 48 bytes.\n\nFor a deterministic result, a parameter seed = (; sk, prf, pk) consisting of three components of 24 bytes each can be provided.\n\n\n\n\n\n","category":"function"},{"location":"slhdsa_shake/","page":"SLH-DSA with SHAKE","title":"SLH-DSA with SHAKE","text":"sign_message","category":"page"},{"location":"slhdsa_shake/#NistyPQC.SLHDSA.Category3f_SHAKE.sign_message","page":"SLH-DSA with SHAKE","title":"NistyPQC.SLHDSA.Category3f_SHAKE.sign_message","text":"sign_message(msg, sk[; randomize])\n\nReturn a signature sig computed from the message msg based on the secret key sk. The message msg may consist of arbitrarily many bytes, whereas sk must be a valid secret key of 96 bytes. The length of sig will be 35664 bytes.\n\nFor a deterministic result, the optional parameter randomize can be set to false or to some given 24 bytes.\n\n\n\n\n\n","category":"function"},{"location":"slhdsa_shake/","page":"SLH-DSA with SHAKE","title":"SLH-DSA with SHAKE","text":"verify_signature","category":"page"},{"location":"slhdsa_shake/#NistyPQC.SLHDSA.Category3f_SHAKE.verify_signature","page":"SLH-DSA with SHAKE","title":"NistyPQC.SLHDSA.Category3f_SHAKE.verify_signature","text":"verify_signature(msg, sig, pk)\n\nCheck whether sig is a valid signature for msg under the public key pk. The message msg and potential signature sig may consist of arbitrarily many bytes, whereas pk must be a valid public key of 48 bytes.\n\n\n\n\n\n","category":"function"},{"location":"slhdsa_shake/#Category-5s","page":"SLH-DSA with SHAKE","title":"Category 5s","text":"","category":"section"},{"location":"slhdsa_shake/","page":"SLH-DSA with SHAKE","title":"SLH-DSA with SHAKE","text":"CurrentModule = NistyPQC.SLHDSA.Category5s_SHAKE","category":"page"},{"location":"slhdsa_shake/","page":"SLH-DSA with SHAKE","title":"SLH-DSA with SHAKE","text":"generate_keys","category":"page"},{"location":"slhdsa_shake/#NistyPQC.SLHDSA.Category5s_SHAKE.generate_keys","page":"SLH-DSA with SHAKE","title":"NistyPQC.SLHDSA.Category5s_SHAKE.generate_keys","text":"generate_keys([; seed])\n\nReturn a tuple (; sk, pk) consisting of a secret key and the corresponding public key. The length of sk will be 128 bytes and the length of pk 64 bytes.\n\nFor a deterministic result, a parameter seed = (; sk, prf, pk) consisting of three components of 32 bytes each can be provided.\n\n\n\n\n\n","category":"function"},{"location":"slhdsa_shake/","page":"SLH-DSA with SHAKE","title":"SLH-DSA with SHAKE","text":"sign_message","category":"page"},{"location":"slhdsa_shake/#NistyPQC.SLHDSA.Category5s_SHAKE.sign_message","page":"SLH-DSA with SHAKE","title":"NistyPQC.SLHDSA.Category5s_SHAKE.sign_message","text":"sign_message(msg, sk[; randomize])\n\nReturn a signature sig computed from the message msg based on the secret key sk. The message msg may consist of arbitrarily many bytes, whereas sk must be a valid secret key of 128 bytes. The length of sig will be 29792 bytes.\n\nFor a deterministic result, the optional parameter randomize can be set to false or to some given 32 bytes.\n\n\n\n\n\n","category":"function"},{"location":"slhdsa_shake/","page":"SLH-DSA with SHAKE","title":"SLH-DSA with SHAKE","text":"verify_signature","category":"page"},{"location":"slhdsa_shake/#NistyPQC.SLHDSA.Category5s_SHAKE.verify_signature","page":"SLH-DSA with SHAKE","title":"NistyPQC.SLHDSA.Category5s_SHAKE.verify_signature","text":"verify_signature(msg, sig, pk)\n\nCheck whether sig is a valid signature for msg under the public key pk. The message msg and potential signature sig may consist of arbitrarily many bytes, whereas pk must be a valid public key of 64 bytes.\n\n\n\n\n\n","category":"function"},{"location":"slhdsa_shake/#Category-5f","page":"SLH-DSA with SHAKE","title":"Category 5f","text":"","category":"section"},{"location":"slhdsa_shake/","page":"SLH-DSA with SHAKE","title":"SLH-DSA with SHAKE","text":"CurrentModule = NistyPQC.SLHDSA.Category5f_SHAKE","category":"page"},{"location":"slhdsa_shake/","page":"SLH-DSA with SHAKE","title":"SLH-DSA with SHAKE","text":"generate_keys","category":"page"},{"location":"slhdsa_shake/#NistyPQC.SLHDSA.Category5f_SHAKE.generate_keys","page":"SLH-DSA with SHAKE","title":"NistyPQC.SLHDSA.Category5f_SHAKE.generate_keys","text":"generate_keys([; seed])\n\nReturn a tuple (; sk, pk) consisting of a secret key and the corresponding public key. The length of sk will be 128 bytes and the length of pk 64 bytes.\n\nFor a deterministic result, a parameter seed = (; sk, prf, pk) consisting of three components of 32 bytes each can be provided.\n\n\n\n\n\n","category":"function"},{"location":"slhdsa_shake/","page":"SLH-DSA with SHAKE","title":"SLH-DSA with SHAKE","text":"sign_message","category":"page"},{"location":"slhdsa_shake/#NistyPQC.SLHDSA.Category5f_SHAKE.sign_message","page":"SLH-DSA with SHAKE","title":"NistyPQC.SLHDSA.Category5f_SHAKE.sign_message","text":"sign_message(msg, sk[; randomize])\n\nReturn a signature sig computed from the message msg based on the secret key sk. The message msg may consist of arbitrarily many bytes, whereas sk must be a valid secret key of 128 bytes. The length of sig will be 49856 bytes.\n\nFor a deterministic result, the optional parameter randomize can be set to false or to some given 32 bytes.\n\n\n\n\n\n","category":"function"},{"location":"slhdsa_shake/","page":"SLH-DSA with SHAKE","title":"SLH-DSA with SHAKE","text":"verify_signature","category":"page"},{"location":"slhdsa_shake/#NistyPQC.SLHDSA.Category5f_SHAKE.verify_signature","page":"SLH-DSA with SHAKE","title":"NistyPQC.SLHDSA.Category5f_SHAKE.verify_signature","text":"verify_signature(msg, sig, pk)\n\nCheck whether sig is a valid signature for msg under the public key pk. The message msg and potential signature sig may consist of arbitrarily many bytes, whereas pk must be a valid public key of 64 bytes.\n\n\n\n\n\n","category":"function"}]
}
